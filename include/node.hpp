//
//  node.hpp
//
//  Created by Jonathan Appiagyei on 3/15/17.
//  Copyright Â© 2017 Jonathan Appiagyei. All rights reserved.
//

#ifndef Node_h
#define Node_h

#include <limits>
#include <memory>
#include <vector>

// Node stores information for an 8-puzzle board state
class Node {
public:
    std::vector<int> state; // arrangement of tiles
    std::shared_ptr<Node> prev_node; // parent node
    std::vector<Node> neighbors; // states generated by legal blank moves
    
    char dir_to_here; // direction blank space moved to get to this node's state
    int g_val = std::numeric_limits<int>::max(); // cost to initial state node
    int f_val = std::numeric_limits<int>::max(); // sum of g_val and f_val
    int h_val; // cheapest cost from this node to goal node
  
    Node(std::vector<int> state, int h_val, std::shared_ptr<Node>
         prev_node = nullptr, char dir_to_here = '\0');
  
    Node(const Node &);
    Node & operator=(const Node &);
    
    ~Node();
    
    bool operator<(const Node &) const;   // used for checking set membership
    bool operator==(const Node &) const;
  
    void update_cost_vals(const int g_val);
};

#endif /* Node_h */
